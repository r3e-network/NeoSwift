name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*.*.*' ]
  pull_request:
    branches: [ main ]

env:
  SWIFT_VERSION: "5.9"

jobs:
  # Build and test on multiple platforms
  build-and-test:
    name: Build and Test (${{ matrix.platform }})
    runs-on: ${{ matrix.runs-on }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: macOS
            runs-on: macos-latest
          - platform: Ubuntu
            runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Swift
      uses: swift-actions/setup-swift@v1
      with:
        swift-version: ${{ env.SWIFT_VERSION }}
    
    - name: Cache Swift packages
      uses: actions/cache@v3
      with:
        path: .build
        key: ${{ runner.os }}-spm-${{ hashFiles('**/Package.resolved') }}
        restore-keys: |
          ${{ runner.os }}-spm-
    
    - name: Build
      run: swift build -v --configuration release
    
    - name: Run tests
      run: swift test -v --parallel
    
    - name: Run security tests
      run: swift test --filter SecurityTests
    
    - name: Generate test coverage
      if: matrix.platform == 'macOS'
      run: |
        swift test --enable-code-coverage
        xcrun llvm-cov export \
          .build/debug/NeoSwiftPackageTests.xctest/Contents/MacOS/NeoSwiftPackageTests \
          -instr-profile .build/debug/codecov/default.profdata \
          -format="lcov" > coverage.lcov
    
    - name: Upload coverage
      if: matrix.platform == 'macOS'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.lcov
        fail_ci_if_error: false

  # Security and quality checks
  security-quality:
    name: Security & Quality Checks
    runs-on: ubuntu-latest
    needs: build-and-test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run SwiftLint
      uses: norio-nomura/action-swiftlint@3.2.1
      with:
        args: --strict --config .swiftlint-security.yml
    
    - name: Check for secrets
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: ${{ github.event.repository.default_branch }}
        head: HEAD
    
    - name: SAST Scan
      uses: returntocorp/semgrep-action@v1
      with:
        config: >-
          p/security-audit
          p/swift
          p/cryptography

  # Documentation check
  documentation:
    name: Documentation Check
    runs-on: macos-latest
    needs: build-and-test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Swift
      uses: swift-actions/setup-swift@v1
      with:
        swift-version: ${{ env.SWIFT_VERSION }}
    
    - name: Build documentation
      run: |
        swift package generate-documentation \
          --disable-indexing \
          --transform-for-static-hosting

  # Integration tests (optional, only on main)
  integration-tests:
    name: Integration Tests
    runs-on: macos-latest
    needs: build-and-test
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/')
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Swift
      uses: swift-actions/setup-swift@v1
      with:
        swift-version: ${{ env.SWIFT_VERSION }}
    
    - name: Run integration tests
      env:
        ENABLE_NETWORK_TESTS: true
      run: |
        swift test --filter IntegrationTests || echo "Integration tests skipped"

  # Release job
  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [build-and-test, security-quality, documentation]
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Setup Swift
      uses: swift-actions/setup-swift@v1
      with:
        swift-version: ${{ env.SWIFT_VERSION }}
    
    - name: Build release artifacts
      run: |
        swift build -c release
        tar -czf neoswift-${{ github.ref_name }}-linux.tar.gz -C .build/release .
    
    - name: Generate changelog
      id: changelog
      run: |
        echo "## What's Changed" > changelog.md
        git log $(git describe --tags --abbrev=0 HEAD^)..HEAD --pretty=format:"- %s by @%an" >> changelog.md
        echo "" >> changelog.md
        echo "## Security Improvements" >> changelog.md
        echo "- Secure memory management for private keys" >> changelog.md
        echo "- Constant-time cryptographic comparisons" >> changelog.md
        echo "- Enhanced dependency security with version bounds" >> changelog.md
        echo "" >> changelog.md
        echo "## Performance Improvements" >> changelog.md
        echo "- Optimized binary serialization with pre-allocated buffers" >> changelog.md
        echo "- Hash caching for repeated operations" >> changelog.md
        echo "- Non-blocking async operations" >> changelog.md
        echo "" >> changelog.md
        echo "**Full Changelog**: https://github.com/${{ github.repository }}/compare/$(git describe --tags --abbrev=0 HEAD^)...${{ github.ref_name }}" >> changelog.md
    
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        body_path: changelog.md
        draft: false
        prerelease: ${{ contains(github.ref, '-beta') || contains(github.ref, '-alpha') }}
        files: |
          neoswift-${{ github.ref_name }}-linux.tar.gz
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Publish to Swift Package Registry (when available)
  publish:
    name: Publish Package
    runs-on: macos-latest
    needs: release
    if: startsWith(github.ref, 'refs/tags/v') && !contains(github.ref, '-beta') && !contains(github.ref, '-alpha')
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Swift
      uses: swift-actions/setup-swift@v1
      with:
        swift-version: ${{ env.SWIFT_VERSION }}
    
    - name: Validate package
      run: |
        swift package describe
        swift package show-dependencies
        swift package dump-package
    
    - name: Tag latest
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git tag -f latest
        git push origin latest --force

  # Notification job
  notify:
    name: Send Notifications
    runs-on: ubuntu-latest
    needs: [release, publish]
    if: always() && startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: Send release notification
      if: needs.release.result == 'success'
      run: |
        echo "ðŸŽ‰ NeoSwift ${{ github.ref_name }} has been released!"
        echo "View release: https://github.com/${{ github.repository }}/releases/tag/${{ github.ref_name }}"
    
    - name: Update release badge
      if: needs.release.result == 'success'
      run: |
        echo "Release badge would be updated here"
        # Could update README badge or send to shields.io